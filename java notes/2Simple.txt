Creating hello java example:-
	>Let's create the hello java program:

class Simple{  
    public static void main(String args[]){  
     System.out.println("Hello Java");  
    }  
}  

>save this file as Simple.java


>To compile:	javac Simple.java
>To execute:	java Simple
	>Output:Hello Java

Understanding first java program:-
	>Let's see what is the meaning of class, public, static, void, main, String[], System.out.println().

CLASS:-class keyword is used to declare a class in java.
PUBLIC:-public keyword is an access modifier which represents visibility, it means it is visible to all.
STATIC:-static is a keyword, if we declare any method as static, it is known as static method. The core advantage of static method is that there is no need to create object to invoke the static method. The main method is executed by the JVM, so it doesn't require to create object to invoke the main method. So it saves memory.
VOID:-void is the return type of the method, it means it doesn't return any value.
MAIN:-main represents startup of the program.
STRING:-String[] args is used for command line argument. We will learn it later.
SYSTEM.OUT.PRINTLN:-System.out.println() is used print statement. We will learn about the internal working of System.out.println statement later.


How many ways can we write a java program:-
	>There are many ways to write a java program. The modifications that can be done in a java program are given below:
1) By changing sequence of the modifiers, method prototype is not changed.

Let's see the simple code of main method:-
static public void main(String args[])  

2) subscript notation in java array can be used after type, before variable or after variable.

Let's see the different codes to write the main method.
>public static void main(String[] args)  
>public static void main(String []args)  
>public static void main(String args[])  

3) You can provide var-args support to main method by passing 3 ellipses (dots)
>Let's see the simple code of using var-args in main method. We will learn about var-args later in Java New Features chapter.
>public static void main(String... args)  

4) Having semicolon at the end of class in java is optional.
>Let's see the simple code.

class A{  
static public void main(String... args){  
System.out.println("hello java4");  
}  
};  

# Valid java main method signature
0)public static void main(String[] args)  
1)public static void main(String []args)  
2)public static void main(String args[])  
3)public static void main(String... args)  
4)static public void main(String[] args)  
5)public static final void main(String[] args)  
6)final public static void main(String[] args)  
7)final strictfp public static void main(String[] args)  

# Invalid java main method signature

0)public void main(String[] args)  
1)static void main(String[] args)  
2)public void static main(String[] args)  
3)abstract public static void main(String[] args)  

Resolving an error "javac is not recognized as an internal or external command" :-
	>If there occurs a problem like displayed in the below figure, you need to set path. Since DOS doesn't know javac or java, we need to set path. Path is not required in such a case
	 >if you save your program inside the jdk/bin folder. But its good approach to set path. 

JVM (Java Virtual Machine):-
	>JVM (Java Virtual Machine) is an abstract machine. It is a specification that provides runtime environment in which java bytecode can be executed.
	>JVMs are available for many hardware and software platforms (i.e. JVM is platform dependent).

What is JVM:-
It is:-
	>A specification where working of Java Virtual Machine is specified. But implementation provider is independent to choose the algorithm. Its implementation has been provided by Sun and other companies.
	>An implementation Its implementation is known as JRE (Java Runtime Environment).
	>Runtime Instance Whenever you write java command on the command prompt to run the java class, an instance of JVM is created.
What it does:-
	>The JVM performs following operation:

>Loads code
>Verifies code
>Executes code
>Provides runtime environment

JVM provides definitions for the:-

>Memory area
>Class file format
>Register set
>Garbage-collected heap
>Fatal error reporting etc.


1) Classloader
>Classloader is a subsystem of JVM that is used to load class files.

2) Class(Method) Area
>Class(Method) Area stores per-class structures such as the runtime constant pool, field and method data, the code for methods.

3) Heap
>It is the runtime data area in which objects are allocated.

4) Stack
>Java Stack stores frames.It holds local variables and partial results, and plays a part in method invocation and return.
>Each thread has a private JVM stack, created at the same time as thread.
>A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.

5) Program Counter Register
>PC (program counter) register. It contains the address of the Java virtual machine instruction currently being executed.

6) Native Method Stack
>It contains all the native methods used in the application.

7) Execution Engine
>It contains
1) A virtual processor
2) Interpreter: Read bytecode stream then execute the instructions.
3) Just-In-Time(JIT) compiler: It is used to improve the performance.JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of time needed for compilation.Here the term ?compiler? refers to a translator from the instruction set of a Java virtual machine (JVM) to the instruction set of a specific CPU.





