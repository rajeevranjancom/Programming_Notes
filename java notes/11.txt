Java BufferedInputStream Class:-
>Java BufferedInputStream class is used to read information from stream. It internally uses buffer mechanism to make the performance fast.

The important points about BufferedInputStream are:-
>When the bytes from the stream are skipped or read, the internal buffer automatically refilled from the contained input stream, many bytes at a time.
>When a BufferedInputStream is created, an internal buffer array is created.

Java BufferedInputStream class declaration

Let's see the declaration for Java.io.BufferedInputStream class:

public class BufferedInputStream extends FilterInputStream  
Java BufferedInputStream class constructors

Constructor							Description
BufferedInputStream(InputStream IS)					It creates the BufferedInputStream and saves it argument, the input stream IS, for later use.
BufferedInputStream(InputStream IS, int size)				It creates the BufferedInputStream with a specified buffer size and saves it argument, the input 
								stream IS, for later use.
Java BufferedInputStream class methods:-

Method								Description
int available()							It returns an estimate number of bytes that can be read from the input stream without blocking by 								the next invocation method for the input stream.
int read()								It read the next byte of data from the input stream.
int read(byte[] b, int off, int ln)					It read the bytes from the specified byte-input stream into a specified byte array, starting with the 								given offset.
void close()							It closes the input stream and releases any of the system resources associated with the stream.
void reset()							It repositions the stream at a position the mark method was last called on this input stream.
void mark(int readlimit)						It sees the general contract of the mark method for the input stream.
long skip(long x)							It skips over and discards x bytes of data from the input stream.
boolean markSupported()						It tests for the input stream to support the mark and reset methods.

 
Example of Java BufferedInputStream:-
Let's see the simple example to read data of file using BufferedInputStream:

package com.javatpoint;  
   
import java.io.*;  
public class BufferedInputStreamExample{    
 public static void main(String args[]){    
  try{    
    FileInputStream fin=new FileInputStream("D:\\testout.txt");    
    BufferedInputStream bin=new BufferedInputStream(fin);    
    int i;    
    while((i=bin.read())!=-1){    
     System.out.print((char)i);    
    }    
    bin.close();    
    fin.close();    
  }catch(Exception e){System.out.println(e);}    
 }    
}  

Here, we are assuming that you have following data in "testout.txt" file:

javaTpoint

Output:
javaTpoint


Java SequenceInputStream Class

Java SequenceInputStream class is used to read data from multiple streams. It reads data sequentially (one by one).

Java SequenceInputStream Class declaration

Let's see the declaration for Java.io.SequenceInputStream class:

public class SequenceInputStream extends InputStream  
Constructors of SequenceInputStream class

Constructor						Description
SequenceInputStream(InputStream s1, InputStream s2)		creates a new input stream by reading the data of two input stream in order, first s1 and then s2.
SequenceInputStream(Enumeration e)			creates a new input stream by reading the data of an enumeration whose type is InputStream.
Methods of SequenceInputStream class

Method	Description:-
>int read()			It is used to read the next byte of data from the input stream.
>int read(byte[] ary, int off, int len)	It is used to read len bytes of data from the input stream into the array of bytes.
>int available()			It is used to return the maximum number of byte that can be read from an input stream.
>void close()			It is used to close the input stream.

 
Java SequenceInputStream Example:-

In this example, we are printing the data of two files testin.txt and testout.txt.

package com.javatpoint;  
  
import java.io.*;  
class InputStreamExample {    
  public static void main(String args[])throws Exception{    
   FileInputStream input1=new FileInputStream("D:\\testin.txt");    
   FileInputStream input2=new FileInputStream("D:\\testout.txt");    
   SequenceInputStream inst=new SequenceInputStream(input1, input2);    
   int j;    
   while((j=inst.read())!=-1){    
    System.out.print((char)j);    
   }    
   inst.close();    
   input1.close();    
   input2.close();    
  }    
} 
   
Here, we are assuming that you have two files: testin.txt and testout.txt which have following information:
testin.txt:

Welcome to Java IO Programming.
testout.txt:

>It is the example of Java SequenceInputStream class.
>After executing the program, you will get following output:

Output:
Welcome to Java IO Programming. It is the example of Java SequenceInputStream class.

Example that reads the data from two files and writes into another file

In this example, we are writing the data of two files testin1.txt and testin2.txt into another file named testout.txt.

package com.javatpoint;  
  
import java.io.*;    
class Input1{    
  public static void main(String args[])throws Exception{    
   FileInputStream fin1=new FileInputStream("D:\\testin1.txt");    
   FileInputStream fin2=new FileInputStream("D:\\testin2.txt");    
   FileOutputStream fout=new FileOutputStream("D:\\testout.txt");      
   SequenceInputStream sis=new SequenceInputStream(fin1,fin2);    
   int i;    
   while((i=sis.read())!=-1)    
   {    
     fout.write(i);        
   }    
   sis.close();    
   fout.close();      
   fin1.close();      
   fin2.close();       
   System.out.println("Success..");  
  }    
}  
  
Output:
Succeess...
testout.txt:

>Welcome to Java IO Programming. It is the example of Java SequenceInputStream class.  
>SequenceInputStream example that reads data using enumeration

>If we need to read the data from more than two files, we need to use Enumeration. Enumeration object can be obtained by calling elements() method of the Vector class. Let's see the simple example where we are reading the data from 4 files: a.txt, b.txt, c.txt and d.txt.

package com.javatpoint;  
import java.io.*;    
import java.util.*;    
class Input2{    
public static void main(String args[])throws IOException{    
//creating the FileInputStream objects for all the files    
FileInputStream fin=new FileInputStream("D:\\a.txt");    
FileInputStream fin2=new FileInputStream("D:\\b.txt");    
FileInputStream fin3=new FileInputStream("D:\\c.txt");    
FileInputStream fin4=new FileInputStream("D:\\d.txt");    
//creating Vector object to all the stream    
Vector v=new Vector();    
v.add(fin);    
v.add(fin2);    
v.add(fin3);    
v.add(fin4);              
//creating enumeration object by calling the elements method    
Enumeration e=v.elements();      
//passing the enumeration object in the constructor    
SequenceInputStream bin=new SequenceInputStream(e);    
int i=0;      
while((i=bin.read())!=-1){    
System.out.print((char)i);    
}     
bin.close();    
fin.close();    
fin2.close();    
}    
}    
The a.txt, b.txt, c.txt and d.txt have following information:

a.txt:

Welcome
b.txt:

to
c.txt:

java
d.txt:

programming

Output:
Welcometojavaprogramming.

Java ByteArrayOutputStream Class:-
>Java ByteArrayOutputStream class is used to write common data into multiple files. In this stream, the data is written into a byte array which can be written to multiple streams later.
>The ByteArrayOutputStream holds a copy of data and forwards it to multiple streams.
>The buffer of ByteArrayOutputStream automatically grows according to data.
>Java ByteArrayOutputStream class declaration

Let's see the declaration for Java.io.ByteArrayOutputStream class:

public class ByteArrayOutputStream extends OutputStream:-
  
Java ByteArrayOutputStream class constructors:-

Constructor:							Description:
ByteArrayOutputStream()						Creates a new byte array output stream with the initial capacity of 32 bytes, though its size increases 									if necessary.
ByteArrayOutputStream(int size)					Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.

Java ByteArrayOutputStream class methods:-

Method:							Description:
int size()							It is used to returns the current size of a buffer.
byte[] toByteArray()					It is used to create a newly allocated byte array.
String toString()						It is used for converting the content into a string decoding bytes using a platform default character set.
String toString(String charsetName)				It is used for converting the content into a string decoding bytes using a specified charsetName.
void write(int b)						It is used for writing the byte specified to the byte array output stream.
void write(byte[] b, int off, int len				It is used for writing len bytes from specified byte array starting from the offset off to the byte array output 								stream.
void writeTo(OutputStream out)				It is used for writing the complete content of a byte array output stream to the specified output stream.
void reset()						It is used to reset the count field of a byte array output stream to zero value.
void close()						It is used to close the ByteArrayOutputStream.

 
Example of Java ByteArrayOutputStream:-
>Let's see a simple example of java ByteArrayOutputStream class to write common data into 2 files: f1.txt and f2.txt.

package com.javatpoint;  
import java.io.*;  
public class DataStreamExample {  
public static void main(String args[])throws Exception{    
      FileOutputStream fout1=new FileOutputStream("D:\\f1.txt");    
      FileOutputStream fout2=new FileOutputStream("D:\\f2.txt");    
        
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(65);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
        
      bout.flush();    
      bout.close();//has no effect    
      System.out.println("Success...");    
     }    
    }   

Output:
Success...
f1.txt:

A
f2.txt:

A



Java ByteArrayInputStream Class:-
>The ByteArrayInputStream is composed of two words: ByteArray and InputStream. As the name suggests, it can be used to read byte array as input stream.
>Java ByteArrayInputStream class contains an internal buffer which is used to read byte array as stream. In this stream, the data is read from a byte array.
>The buffer of ByteArrayInputStream automatically grows according to data.
>Java ByteArrayInputStream class declaration

Let's see the declaration for Java.io.ByteArrayInputStream class:

>public class ByteArrayInputStream extends InputStream 
 
Java ByteArrayInputStream class constructors:-

Constructor:-							Description:-	
ByteArrayInputStream(byte[] ary)					Creates a new byte array input stream which uses ary as its buffer array.
ByteArrayInputStream(byte[] ary, int offset, int len)			Creates a new byte array input stream which uses ary as its buffer array that can read up to 										specified len bytes of data from an array.

Java ByteArrayInputStream class methods:-

Methods						Description
int available()					It is used to return the number of remaining bytes that can be read from the input stream.
int read()						It is used to read the next byte of data from the input stream.
int read(byte[] ary, int off, int len)			It is used to read up to len bytes of data from an array of bytes in the input stream.
boolean markSupported()				It is used to test the input stream for mark and reset method.
long skip(long x)					It is used to skip the x bytes of input from the input stream.
void mark(int readAheadLimit)			It is used to set the current marked position in the stream.
void reset()					It is used to reset the buffer of a byte array.
void close()					It is used for closing a ByteArrayInputStream.

 
Example of Java ByteArrayInputStream:-

Let's see a simple example of java ByteArrayInputStream class to read byte array as input stream.

package com.javatpoint;  
import java.io.*;  
public class ReadExample {  
  public static void main(String[] args) throws IOException {  
    byte[] buf = { 35, 36, 37, 38 };  
    // Create the new byte array input stream  
    ByteArrayInputStream byt = new ByteArrayInputStream(buf);  
    int k = 0;  
    while ((k = byt.read()) != -1) {  
      //Conversion of a byte into character  
      char ch = (char) k;  
      System.out.println("ASCII value of Character is:" + k + "; Special character is: " + ch);  
    }  
  }  
}  

Output:
ASCII value of Character is:35; Special character is: #
ASCII value of Character is:36; Special character is: $
ASCII value of Character is:37; Special character is: %
ASCII value of Character is:38; Special character is: &



Java DataOutputStream Class:-
>Java DataOutputStream class allows an application to write primitive Java data types to the output stream in a machine-independent way.
>Java application generally uses the data output stream to write data that can later be read by a data input stream.

Java DataOutputStream class declaration:-

Let's see the declaration for java.io.DataOutputStream class:

>public class DataOutputStream extends FilterOutputStream implements DataOutput  
>Java DataOutputStream class methods

Method						Description
int size()						It is used to return the number of bytes written to the data output stream.
void write(int b)					It is used to write the specified byte to the underlying output stream.
void write(byte[] b, int off, int len)			It is used to write len bytes of data to the output stream.
void writeBoolean(boolean v)			It is used to write Boolean to the output stream as a 1-byte value.
void writeChar(int v)				It is used to write char to the output stream as a 2-byte value.
void writeChars(String s)				It is used to write string to the output stream as a sequence of characters.
void writeByte(int v)				It is used to write a byte to the output stream as a 1-byte value.
void writeBytes(String s)				It is used to write string to the output stream as a sequence of bytes.
void writeInt(int v)					It is used to write an int to the output stream
void writeShort(int v)				It is used to write a short to the output stream.
void writeShort(int v)				It is used to write a short to the output stream.
void writeLong(long v)				It is used to write a long to the output stream.
void writeUTF(String str)				It is used to write a string to the output stream using UTF-8 encoding in portable manner.
void flush()					It is used to flushes the data output stream.

 
Example of DataOutputStream class:-
>In this example, we are writing the data to a text file testout.txt using DataOutputStream class.

package com.javatpoint;  
  
import java.io.*;  
public class OutputExample {  
    public static void main(String[] args) throws IOException {  
        FileOutputStream file = new FileOutputStream(D:\\testout.txt);  
        DataOutputStream data = new DataOutputStream(file);  
        data.writeInt(65);  
        data.flush();  
        data.close();  
        System.out.println("Succcess...");  
    }  
}  
Output:

Succcess...
testout.txt:
A



Java DataInputStream Class:-
>Java DataInputStream class allows an application to read primitive data from the input stream in a machine-independent way.
>Java application generally uses the data output stream to write data that can later be read by a data input stream.

Java DataInputStream class declaration:-

Let's see the declaration for java.io.DataInputStream class:

>public class DataInputStream extends FilterInputStream implements DataInput  
>Java DataInputStream class Methods

Method					Description
int read(byte[] b)				It is used to read the number of bytes from the input stream.
int read(byte[] b, int off, int len)		It is used to read len bytes of data from the input stream.
int readInt()				It is used to read input bytes and return an int value.
byte readByte()				It is used to read and return the one input byte.
char readChar()				It is used to read two input bytes and returns a char value.
double readDouble()			It is used to read eight input bytes and returns a double value.
boolean readBoolean()			It is used to read one input byte and return true if byte is non zero, false if byte is zero.
int skipBytes(int x)				It is used to skip over x bytes of data from the input stream.
String readUTF()				It is used to read a string that has been encoded using the UTF-8 format.
void readFully(byte[] b)			It is used to read bytes from the input stream and store them into the buffer array.
void readFully(byte[] b, int off, int len)		It is used to read len bytes from the input stream.

 
Example of DataInputStream class:-
<In this example, we are reading the data from the file testout.txt file.

package com.javatpoint;  
import java.io.*;    
public class DataStreamExample {  
  public static void main(String[] args) throws IOException {  
    InputStream input = new FileInputStream("D:\\testout.txt");  
    DataInputStream inst = new DataInputStream(input);  
    int count = input.available();  
    byte[] ary = new byte[count];  
    inst.read(ary);  
    for (byte bt : ary) {  
      char k = (char) bt;  
      System.out.print(k+"-");  
    }  
  }  
}
  
>Here, we are assuming that you have following data in "testout.txt" file:

JAVA

Output:
J-A-V-A


Java FilterOutputStream Class:-
>Java FilterOutputStream class implements the OutputStream class. It provides different sub classes such as BufferedOutputStream and DataOutputStream to provide additional  functionality. So it is less used individually.
>Java FilterOutputStream class declaration

Let's see the declaration for java.io.FilterOutputStream class:

public class FilterOutputStream extends OutputStream  
Java FilterOutputStream class Methods:-

Method				Description
void write(int b)			It is used to write the specified byte to the output stream.
void write(byte[] ary)		It is used to write ary.length byte to the output stream.
void write(byte[] b, int off, int len)	It is used to write len bytes from the offset off to the output stream.
void flush()			It is used to flushes the output stream.
void close()			It is used to close the output stream.

 
Example of FilterOutputStream class:-

import java.io.*;  
public class FilterExample {  
    public static void main(String[] args) throws IOException {  
        File data = new File("D:\\testout.txt");  
        FileOutputStream file = new FileOutputStream(data);  
        FilterOutputStream filter = new FilterOutputStream(file);  
        String s="Welcome to javaTpoint.";      
        byte b[]=s.getBytes();      
        filter.write(b);     
        filter.flush();  
        filter.close();  
        file.close();  
        System.out.println("Success...");  
    }  
}  
   
Output:

Success...
testout.txt

Welcome to javaTpoint:-

Java FilterInputStream Class:-
>Java FilterInputStream class implements the InputStream. It contains different sub classes as BufferedInputStream, DataInputStream for providing additional functionality. So it is less used individually.

>Java FilterInputStream class declaration

Let's see the declaration for java.io.FilterInputStream class

public class FilterInputStream extends InputStream  
Java FilterInputStream class Methods

Method					Description
int available()				It is used to return an estimate number of bytes that can be read from the input stream.
int read()					It is used to read the next byte of data from the input stream.
int read(byte[] b)				It is used to read up to byte.length bytes of data from the input stream.
long skip(long n)				It is used to skip over and discards n bytes of data from the input stream.
boolean markSupported()			It is used to test if the input stream support mark and reset method.
void mark(int readlimit)			It is used to mark the current position in the input stream.
void reset()				It is used to reset the input stream.
void close()				It is used to close the input stream.

 
Example of FilterInputStream class

import java.io.*;  
public class FilterExample {  
    public static void main(String[] args) throws IOException {  
        File data = new File("D:\\testout.txt");  
        FileInputStream  file = new FileInputStream(data);  
        FilterInputStream filter = new BufferedInputStream(file);  
        int k =0;  
        while((k=filter.read())!=-1){  
            System.out.print((char)k);  
        }  
        file.close();  
        filter.close();  
    }  
}
  
Here, we are assuming that you have following data in "testout.txt" file:

Welcome to javatpoint
Output:
Welcome to javatpoint


Java Console Class:-
>The Java Console class is be used to get input from console. It provides methods to read texts and passwords.
>If you read password using Console class, it will not be displayed to the user.
>The java.io.Console class is attached with system console internally. The Console class is introduced since 1.5.

Let's see a simple example to read text from console.

String text=System.console().readLine();    
System.out.println("Text is: "+text);    
Java Console class declaration

Let's see the declaration for Java.io.Console class:
>public final class Console extends Object implements Flushable 
 
Java Console class methods:-

Method:-						Description:-
Reader reader()						It is used to retrieve the reader object associated with the console
String readLine()						It is used to read a single line of text from the console.
String readLine(String fmt, Object... args)			It provides a formatted prompt then reads the single line of text from the console.
char[] readPassword()					It is used to read password that is not being displayed on the console.
char[] readPassword(String fmt, Object... args)			It provides a formatted prompt then reads the password that is not being displayed on the console.
Console format(String fmt, Object... args)			It is used to write a formatted string to the console output stream.
Console printf(String format, Object... args)			It is used to write a string to the console output stream.
PrintWriter writer()					It is used to retrieve the PrintWriter object associated with the console.
void flush()						It is used to flushes the console.

 
How to get the object of Console:-
>System class provides a static method console() that returns the singleton instance of Console class.

public static Console console(){}   
Let's see the code to get the instance of Console class.

Console c=System.console();  
Java Console Example

import java.io.Console;  
class ReadStringTest{    
public static void main(String args[]){    
Console c=System.console();    
System.out.println("Enter your name: ");    
String n=c.readLine();    
System.out.println("Welcome "+n);    
}    
}  

Output

Enter your name: Nakul Jain
Welcome Nakul Jain
Java Console Example to read password


import java.io.Console;  
class ReadPasswordTest{    
public static void main(String args[]){    
Console c=System.console();    
System.out.println("Enter password: ");    
char[] ch=c.readPassword();    
String pass=String.valueOf(ch);//converting char array into string    
System.out.println("Password is: "+pass);    
}    
}  

Output:-
Enter password: 
Password is: 123


Java FilePermission Class:-
>Java FilePermission class contains the permission related to a directory or file. All the permissions are related with path. The path can be of two types:

1) D:\\IO\\-: It indicates that the permission is associated with all sub directories and files recursively.

2) D:\\IO\\*: It indicates that the permission is associated with all directory and files within this directory excluding sub directories.

Java FilePermission class declaration:-

Let's see the declaration for Java.io.FilePermission class:
>public final class FilePermission extends Permission implements Serializable  

Methods of FilePermission class:-

Method:-							Description:-
ByteArrayOutputStream()					Creates a new byte array output stream with the initial capacity of 32 bytes, though its size increases if 							necessary.
ByteArrayOutputStream(int size)				Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.

Java FilePermission class methods:-

Method:-						Description:-
int hashCode()						It is used to return the hash code value of an object.
String getActions()						It is used to return the "canonical string representation" of an action.
boolean equals(Object obj)					It is used to check the two FilePermission objects for equality.
boolean implies(Permission p)				It is used to check the FilePermission object for the specified permission.
PermissionCollection newPermissionCollection()		It is used to return the new PermissonCollection object for storing the FilePermission object.

 
Java FilePermission Example:-

Let's see the simple example in which permission of a directory path is granted with read permission and a file of this directory is granted for write permission.

package com.javatpoint:
  
import java.io.*;  
import java.security.PermissionCollection;  
public class FilePermissionExample{  
       public static void main(String[] args) throws IOException {  
        String srg = "D:\\IO Package\\java.txt";  
        FilePermission file1 = new FilePermission("D:\\IO Package\\-", "read");  
        PermissionCollection permission = file1.newPermissionCollection();  
        permission.add(file1);  
             FilePermission file2 = new FilePermission(srg, "write");  
             permission.add(file2);  
             if(permission.implies(new FilePermission(srg, "read,write"))) {  
             System.out.println("Read, Write permission is granted for the path "+srg );  
             }else {  
            System.out.println("No Read, Write permission is granted for the path "+srg);            }  
       }   
}  

Output
Read, Write permission is granted for the path D:\IO Package\java.txt


Java FileWriter Class:-
>Java FileWriter class is used to write character-oriented data to a file. It is character-oriented class which is used for file handling in java.
>Unlike FileInputStream class, you don't need to convert string into byte array because it provides method to write string directly.

Java FileWriter class declaration:-
>Let's see the declaration for Java.io.FileWriter class:

public class FileWriter extends OutputStreamWriter  
>Constructors of FileWriter class

Constructor:				Description:
FileWriter(String file)			Creates a new file. It gets file name in string.
FileWriter(File file)				Creates a new file. It gets file name in File object.

Methods of FileWriter class:-

Method:						Description:
void write(String text)				It is used to write the string into FileWriter.
void write(char c)					It is used to write the char into FileWriter.
void write(char[] c)				It is used to write char array into FileWriter.
void flush()					It is used to flushes the data of FileWriter.
void close()					It is used to close the FileWriter.

 
Java FileWriter Example:-
>In this example, we are writing the data in the file testout.txt using Java FileWriter class.

package com.javatpoint;  
import java.io.FileWriter;  
public class FileWriterExample {  
    public static void main(String args[]){    
         try{    
           FileWriter fw=new FileWriter("D:\\testout.txt");    
           fw.write("Welcome to javaTpoint.");    
           fw.close();    
          }catch(Exception e){System.out.println(e);}    
          System.out.println("Success...");    
     }    
}  

Output:
Success...
testout.txt:
Welcome to javaTpoint.


Java FileReader Class:-
>Java FileReader class is used to read data from the file. It returns data in byte format like FileInputStream class.
>It is character-oriented class which is used for file handling in java.

Java FileReader class declaration:-
>Let's see the declaration for Java.io.FileReader class:

public class FileReader extends InputStreamReader  
Constructors of FileReader class

Constructor:				Description:
FileReader(String file)			It gets filename in string. It opens the given file in read mode. If file doesn't exist, it throws FileNotFoundException.
FileReader(File file)			It gets filename in file instance. It opens the given file in read mode. If file doesn't exist, it throws FileNotFoundException.

Methods of FileReader class:-

Method:				Description:
int read()				It is used to return a character in ASCII form. It returns -1 at the end of file.
void close()			It is used to close the FileReader class.

 
Java FileReader Example:-
>In this example, we are reading the data from the text file testout.txt using Java FileReader class.

package com.javatpoint;  
  
import java.io.FileReader;  
public class FileReaderExample {  
    public static void main(String args[])throws Exception{    
          FileReader fr=new FileReader("D:\\testout.txt");    
          int i;    
          while((i=fr.read())!=-1)    
          System.out.print((char)i);    
          fr.close();    
    }    
}
    
>Here, we are assuming that you have following data in "testout.txt" file:

Welcome to javaTpoint.
Output:

Welcome to javaTpoint.


Java BufferedWriter Class:-
>Java BufferedWriter class is used to provide buffering for Writer instances. It makes the performance fast. It inherits Writer class. The buffering characters are used for providing the efficient writing of single arrays, characters, and strings.

Class declaration:-
>Let's see the declaration for Java.io.BufferedWriter class:

public class BufferedWriter extends Writer :
 
Class constructors:-

Constructor:			Description:
BufferedWriter(Writer wrt)		It is used to create a buffered character output stream that uses the default size for an output buffer.
BufferedWriter(Writer wrt, int size)	It is used to create a buffered character output stream that uses the specified size for an output buffer.

Class methods:-

Method						Description
void newLine()					It is used to add a new line by writing a line separator.
void write(int c)					It is used to write a single character.
void write(char[] cbuf, int off, int len)			It is used to write a portion of an array of characters.
void write(String s, int off, int len)			It is used to write a portion of a string.
void flush()					It is used to flushes the input stream.
void close()					It is used to closes the input stream

 
Example of Java BufferedWriter:-
>Let's see the simple example of writing the data to a text file testout.txt using Java BufferedWriter.

package com.javatpoint;  
import java.io.*;  
public class BufferedWriterExample {  
public static void main(String[] args) throws Exception {     
    FileWriter writer = new FileWriter("D:\\testout.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    buffer.write("Welcome to javaTpoint.");  
    buffer.close();  
    System.out.println("Success");  
    }  
}  

Output:
success
testout.txt:
Welcome to javaTpoint.


Java BufferedReader Class:-
>Java BufferedReader class is used to read the text from a character-based input stream. It can be used to read data line by line by readLine() method. It makes the performance fast. It inherits Reader class.

Java BufferedReader class declaration:-
>Let's see the declaration for Java.io.BufferedReader class:

public class BufferedReader extends Reader  

Java BufferedReader class constructors:-

Constructor						Description
BufferedReader(Reader rd)					It is used to create a buffered character input stream that uses the default size for an input buffer.
BufferedReader(Reader rd, int size)				It is used to create a buffered character input stream that uses the specified size for an input buffer.

Java BufferedReader class methods:-

Method							Description
int read()							It is used for reading a single character.
int read(char[] cbuf, int off, int len)				It is used for reading characters into a portion of an array.
boolean markSupported()					It is used to test the input stream support for the mark and reset method.
String readLine()						It is used for reading a line of text.
boolean ready()						It is used to test whether the input stream is ready to be read.
long skip(long n)						It is used for skipping the characters.
void reset()						It repositions the stream at a position the mark method was last called on this input stream.
void mark(int readAheadLimit)				It is used for marking the present position in a stream.
void close()						It closes the input stream and releases any of the system resources associated with the stream.

 
Java BufferedReader Example:-
>In this example, we are reading the data from the text file testout.txt using Java BufferedReader class.

package com.javatpoint;  
import java.io.*;  
public class BufferedReaderExample {  
    public static void main(String args[])throws Exception{    
          FileReader fr=new FileReader("D:\\testout.txt");    
          BufferedReader br=new BufferedReader(fr);    
  
          int i;    
          while((i=br.read())!=-1){  
          System.out.print((char)i);  
          }  
          br.close();    
          fr.close();    
    }    
} 
   
Here, we are assuming that you have following data in "testout.txt" file:
Welcome to javaTpoint.

Output:
Welcome to javaTpoint.

>Reading data from console by InputStreamReader and BufferedReader

In this example, we are connecting the BufferedReader stream with the InputStreamReader stream for reading the line by line data from the keyboard.

package com.javatpoint;  
import java.io.*;  
public class BufferedReaderExample{    
public static void main(String args[])throws Exception{             
    InputStreamReader r=new InputStreamReader(System.in);    
    BufferedReader br=new BufferedReader(r);            
    System.out.println("Enter your name");    
    String name=br.readLine();    
    System.out.println("Welcome "+name);    
}    
}  

Output:
Enter your name
Nakul Jain
Welcome Nakul Jain
Java Buffer reader class 1

>Another example of reading data from console until user writes stop
>In this example, we are reading and printing the data until the user prints stop.

package com.javatpoint;  
import java.io.*;  
public class BufferedReaderExample{    
public static void main(String args[])throws Exception{             
     InputStreamReader r=new InputStreamReader(System.in);    
     BufferedReader br=new BufferedReader(r);           
     String name="";    
     while(!name.equals("stop")){    
      System.out.println("Enter data: ");    
      name=br.readLine();    
      System.out.println("data is: "+name);    
     }              
    br.close();    
    r.close();    
    }    
    }  

Output:
Enter data: Nakul
data is: Nakul
Enter data: 12
data is: 12
Enter data: stop
data is: stop


Java CharArrayReader Class:-
>The CharArrayReader is composed of two words: CharArray and Reader. The CharArrayReader class is used to read character array as a reader (stream). It inherits Reader class.

Java CharArrayReader class declaration:-

>Let's see the declaration for Java.io.CharArrayReader class:

public class CharArrayReader extends Reader  
Java CharArrayReader class methods

Method:							Description:
int read()							It is used to read a single character
int read(char[] b, int off, int len)				It is used to read characters into the portion of an array.
boolean ready()						It is used to tell whether the stream is ready to read.
boolean markSupported()					It is used to tell whether the stream supports mark() operation.
long skip(long n)						It is used to skip the character in the input stream.
void mark(int readAheadLimit)				It is used to mark the present position in the stream.
void reset()						It is used to reset the stream to a most recent mark.
void close()						It is used to closes the stream.

 
Example of CharArrayReader Class:-
>Let's see the simple example to read a character using Java CharArrayReader class.

package com.javatpoint;  
  
import java.io.CharArrayReader;  
public class CharArrayExample{  
  public static void main(String[] ag) throws Exception {  
    char[] ary = { 'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't' };  
    CharArrayReader reader = new CharArrayReader(ary);  
    int k = 0;  
    // Read until the end of a file  
    while ((k = reader.read()) != -1) {  
      char ch = (char) k;  
      System.out.print(ch + " : ");  
      System.out.println(k);  
    }  
  }  
}  

Output
j : 106
a : 97
v : 118
a : 97
t : 116
p : 112
o : 111
i : 105
n : 110
t : 116


Java CharArrayWriter Class:-
>The CharArrayWriter class can be used to write common data to multiple files. This class inherits Writer class. Its buffer automatically grows when data is written in this stream. Calling the close() method on this object has no effect.

Java CharArrayWriter class declaration:-
>Let's see the declaration for Java.io.CharArrayWriter class:

public class CharArrayWriter extends Writer
  
Java CharArrayWriter class Methods:-

Method							Description
int size()							It is used to return the current size of the buffer.
char[] toCharArray()					It is used to return the copy of an input data.
String toString()						It is used for converting an input data to a string.
CharArrayWriter append(char c)				It is used to append the specified character to the writer.
CharArrayWriter append(CharSequence csq)			It is used to append the specified character sequence to the writer.
CharArrayWriter append(CharSequence csq, int start, int end)	It is used to append the subsequence of a specified character to the writer.
void write(int c)	It is used to write a character to the buffer.
void write(char[] c, int off, int len)				It is used to write a character to the buffer.
void write(String str, int off, int len)				It is used to write a portion of string to the buffer.
void writeTo(Writer out)					It is used to write the content of buffer to different character stream.
void flush()						It is used to flush the stream.
void reset()						It is used to reset the buffer.
void close()						It is used to close the stream.

 
Example of CharArrayWriter Class:-
>In this example, we are writing a common data to 4 files a.txt, b.txt, c.txt and d.txt.

package com.javatpoint;  
  
import java.io.CharArrayWriter;  
import java.io.FileWriter;  
public class CharArrayWriterExample {  
public static void main(String args[])throws Exception{    
          CharArrayWriter out=new CharArrayWriter();    
          out.write("Welcome to javaTpoint");    
          FileWriter f1=new FileWriter("D:\\a.txt");    
          FileWriter f2=new FileWriter("D:\\b.txt");    
          FileWriter f3=new FileWriter("D:\\c.txt");    
          FileWriter f4=new FileWriter("D:\\d.txt");    
          out.writeTo(f1);    
          out.writeTo(f2);    
          out.writeTo(f3);    
          out.writeTo(f4);    
          f1.close();    
          f2.close();    
          f3.close();    
          f4.close();    
          System.out.println("Success...");    
         }    
        }    

Output
Success...

After executing the program, you can see that all files have common data: Welcome to javaTpoint.

a.txt:

Welcome to javaTpoint
b.txt:

Welcome to javaTpoint
c.txt:

Welcome to javaTpoint
d.txt:

Welcome to javaTpoint


Java PrintStream Class:-
>The PrintStream class provides methods to write data to another stream. The PrintStream class automatically flushes the data so there is no need to call flush() method. Moreover, its methods don't throw IOException.

Class declaration:-
>Let's see the declaration for Java.io.PrintStream class:

>public class PrintStream extends FilterOutputStream implements Closeable. Appendable   

Methods of PrintStream class:-

Method:							Description:
void print(boolean b)					It prints the specified boolean value.
void print(char c)						It prints the specified char value.
void print(char[] c)						It prints the specified character array values.
void print(int i)						It prints the specified int value.
void print(long l)						It prints the specified long value.
void print(float f)						It prints the specified float value.
void print(double d)					It prints the specified double value.
void print(String s)						It prints the specified string value.
void print(Object obj)					It prints the specified object value.
void println(boolean b)					It prints the specified boolean value and terminates the line.
void println(char c)					It prints the specified char value and terminates the line.
void println(char[] c)					It prints the specified character array values and terminates the line.
void println(int i)						It prints the specified int value and terminates the line.
void println(long l)						It prints the specified long value and terminates the line.
void println(float f)					It prints the specified float value and terminates the line.
void println(double d)					It prints the specified double value and terminates the line.
void println(String s)					It prints the specified string value and terminates the line.
void println(Object obj)					It prints the specified object value and terminates the line.
void println()						It terminates the line only.
void printf(Object format, Object... args)			It writes the formatted string to the current stream.
void printf(Locale l, Object format, Object... args)		It writes the formatted string to the current stream.
void format(Object format, Object... args)			It writes the formatted string to the current stream using specified format.
void format(Locale l, Object format, Object... args)		It writes the formatted string to the current stream using specified format.

 
Example of java PrintStream class:-
>In this example, we are simply printing integer and string value.

package com.javatpoint;  
  
import java.io.FileOutputStream;  
import java.io.PrintStream;  
public class PrintStreamTest{    
 public static void main(String args[])throws Exception{    
   FileOutputStream fout=new FileOutputStream("D:\\testout.txt ");    
   PrintStream pout=new PrintStream(fout);    
   pout.println(2016);    
   pout.println("Hello Java");    
   pout.println("Welcome to Java");    
   pout.close();    
   fout.close();    
  System.out.println("Success?");    
 }    
}    
   

Output
Success...

The content of a text file testout.txt is set with the below data

2016
Hello Java
Welcome to Java

Example of printf() method using java PrintStream class:
>Let's see the simple example of printing integer value by format specifier using printf() method of java.io.PrintStream class.

class PrintStreamTest{    
 public static void main(String args[]){    
   int a=19;    
   System.out.printf("%d",a); //Note: out is the object of printstream       
 }    
}   

Output
19


Java PrintWriter class
>Java PrintWriter class is the implementation of Writer class. It is used to print the formatted representation of objects to the text-output stream.

Class declaration:-
>Let's see the declaration for Java.io.PrintWriter class:

public class PrintWriter extends Writer  :-

Methods of PrintWriter class:-

Method:						Description:
void println(boolean x)				It is used to print the boolean value.
void println(char[] x)				It is used to print an array of characters.
void println(int x)					It is used to print an integer.
PrintWriter append(char c)				It is used to append the specified character to the writer.
PrintWriter append(CharSequence ch)		It is used to append the specified character sequence to the writer.
PrintWriter append(CharSequence ch, int start, int end)	It is used to append a subsequence of specified character to the writer.
boolean checkError()				It is used to flushes the stream and check its error state.
protected void setError()				It is used to indicate that an error occurs.
protected void clearError()				It is used to clear the error state of a stream.
PrintWriter format(String format, Object... args)	It is used to write a formatted string to the writer using specified arguments and format string.
void print(Object obj)				It is used to print an object.
void flush()					It is used to flushes the stream.
void close()					It is used to close the stream.

 
Java PrintWriter Example:-
>Let's see the simple example of writing the data on a console and in a text file testout.txt using Java PrintWriter class.

package com.javatpoint;  
  
import java.io.File;  
import java.io.PrintWriter;  
public class PrintWriterExample {  
    public static void main(String[] args) throws Exception {  
             //Data to write on Console using PrintWriter  
      PrintWriter writer = new PrintWriter(System.out);    
      writer.write("Javatpoint provides tutorials of all technology.");        
 writer.flush();  
      writer.close();  
//Data to write in File using PrintWriter       
      PrintWriter writer1 =null;      
         writer1 = new PrintWriter(new File("D:\\testout.txt"));  
         writer1.write("Like Java, Spring, Hibernate, Android, PHP etc.");                                                   
                         writer1.flush();  
         writer1.close();  
    }  
}
  
Outpt
Javatpoint provides tutorials of all technology.


Java PushbackInputStream Class:-
>Java PushbackInputStream class overrides InputStream and provides extra functionality to another input stream. It can unread a byte which is already read and push back one byte.

Class declaration:-
>Let's see the declaration for java.io.PushbackInputStream class:

public class PushbackInputStream extends FilterInputStream  

Class Methods:-
>It is used to test if the input stream support mark and reset method.

Method						Description
int available()					It is used to return the number of bytes that can be read from the input stream.
int read()						It is used to read the next byte of data from the input stream.
boolean markSupported()	
void mark(int readlimit)				It is used to mark the current position in the input stream.
long skip(long x)					It is used to skip over and discard x bytes of data.
void unread(int b)					It is used to pushes back the byte by copying it to the pushback buffer.
void unread(byte[] b)				It is used to pushes back the array of byte by copying it to the pushback buffer.
void reset()					It is used to reset the input stream.
void close()					It is used to close the input stream.

 
Example of PushbackInputStream class:-

import java.io.*;  
public class InputStreamExample {  
public static void main(String[] args)throws Exception{  
          String srg = "1##2#34###12";  
          byte ary[] = srg.getBytes();  
          ByteArrayInputStream array = new ByteArrayInputStream(ary);  
          PushbackInputStream push = new PushbackInputStream(array);  
          int i;        
              while( (i = push.read())!= -1) {  
                  if(i == '#') {  
                      int j;  
                      if( (j = push.read()) == '#'){  
                           System.out.print("**");  
                      }else {  
                          push.unread(j);  
                          System.out.print((char)i);  
                      }  
                  }else {  
                              System.out.print((char)i);  
                  }  
             }        
  }   
}
  
Output:
1**2#34**#12  


Java PushbackReader Class:-
>Java PushbackReader class is a character stream reader. It is used to pushes back a character into stream and overrides the FilterReader class.

Class declaration:-
>Let' s see the declaration for java.io.PushbackReader class:

public class PushbackReader extends FilterReader  
Class Methods:-

Method					Description
int read()					It is used to read a single character.
void mark(int readAheadLimit)		It is used to mark the present position in a stream.
boolean ready()				It is used to tell whether the stream is ready to be read.
boolean markSupported()			It is used to tell whether the stream supports mark() operation.
long skip(long n)				It is used to skip the character.
void unread (int c)				It is used to pushes back the character by copying it to the pushback buffer.
void unread (char[] cbuf)			It is used to pushes back an array of character by copying it to the pushback buffer.
void reset()				It is used to reset the stream.
void close()				It is used to close the stream.

 
Example of PushbackReader class:-

import java.io.*;  
public class ReaderExample{  
    public static void main(String[] args) throws Exception {  
        char ary[] = {'1','-','-','2','-','3','4','-','-','-','5','6'};  
        CharArrayReader reader = new CharArrayReader(ary);   
        PushbackReader push = new PushbackReader(reader);  
        int i;  
            while( (i = push.read())!= -1) {  
                if(i == '-') {  
                    int j;  
                    if( (j = push.read()) == '-'){  
                         System.out.print("#*");  
                    }else {  
                        push.unread(j); // push back single character  
                        System.out.print((char)i);  
                    }  
                }else {  
                        System.out.print((char)i);  
                }  
           }         
    }  
} 
 
Output
1#*2-34#*-56  


Java StringWriter Class:-
>Java StringWriter class is a character stream that collects output from string buffer, which can be used to construct a string. The StringWriter class inherits the Writer class.
>In StringWriter class, system resources like network sockets and files are not used, therefore closing the StringWriter is not necessary.

Java StringWriter class declaration:-
>Let's see the declaration for Java.io.StringWriter class:

public class StringWriter extends Writer  
Methods of StringWriter class

Method							Description
void write(int c)						It is used to write the single character.
void write(String str)					It is used to write the string.
void write(String str, int off, int len)				It is used to write the portion of a string.
void write(char[] cbuf, int off, int len)				It is used to write the portion of an array of characters.
String toString()						It is used to return the buffer current value as a string.
StringBuffer getBuffer()					It is used t return the string buffer.
StringWriter append(char c)					It is used to append the specified character to the writer.
StringWriter append(CharSequence csq)			It is used to append the specified character sequence to the writer.
StringWriter append(CharSequence csq, int start, int end)	It is used to append the subsequence of specified character sequence to the writer.
void flush()						It is used to flush the stream.
void close()						It is used to close the stream.

 
Java StringWriter Example:-
>Let's see the simple example of StringWriter using BufferedReader to read file data from the stream.

import java.io.*;  
public class StringWriterExample {  
    public static void main(String[] args) throws IOException {  
        char[] ary = new char[512];  
        StringWriter writer = new StringWriter();  
        FileInputStream input = null;  
        BufferedReader buffer = null;  
        input = new FileInputStream("D://testout.txt");  
        buffer = new BufferedReader(new InputStreamReader(input, "UTF-8"));  
        int x;  
        while ((x = buffer.read(ary)) != -1) {  
                   writer.write(ary, 0, x);  
        }  
        System.out.println(writer.toString());        
        writer.close();  
        buffer.close();  
    }  
}  

testout.txt:
Javatpoint provides tutorial in Java, Spring, Hibernate, Android, PHP etc.

Output:
Javatpoint provides tutorial in Java, Spring, Hibernate, Android, PHP etc


Java StringReader Class:-
>Java StringReader class is a character stream with string as a source. It takes an input string and changes it into character stream. It inherits Reader class.
>In StringReader class, system resources like network sockets and files are not used, therefore closing the StringReader is not necessary.

Java StringReader class declaration:-
>Let's see the declaration for Java.io.StringReader class:

public class StringReader extends Reader  

Methods of StringReader class:-

Method:						Description:
int read()						It is used to read a single character.
int read(char[] cbuf, int off, int len)			It is used to read a character into a portion of an array.
boolean ready()					It is used to tell whether the stream is ready to be read.
boolean markSupported()				It is used to tell whether the stream support mark() operation.
long skip(long ns)					It is used to skip the specified number of character in a stream
void mark(int readAheadLimit)			It is used to mark the mark the present position in a stream.
void reset()					It is used to reset the stream.
void close()					It is used to close the stream.

 
Java StringReader Example:-

import java.io.StringReader;  
public class StringReaderExample {  
    public static void main(String[] args) throws Exception {  
        String srg = "Hello Java!! \nWelcome to Javatpoint.";  
        StringReader reader = new StringReader(srg);  
        int k=0;  
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}
  
Output:
Hello Java!! 
Welcome to Javatpoint.


